class JmeterRun < ActiveRecord::Base
  attr_accessible :description, :jmx_source, :project_id, :state, :stderror, :stdout, :jmeter_pid,:locked 

  belongs_to :project, :touch => true

  state_machine :initial => :idle do
    before_transition :idle => :running, :do => :perform_test
    before_transition :running => :killed, :do => :kill_process
    before_transition :running => :finished, :do => :validate_results
    
    event :start do 
      transition :idle => :running
    end

    event :kill do
      transition :running => :killed
    end

    event :finish do
      transition :running => :finished
    end

    event :kill do
      transition :running => :killed
    end

    event :fatal_error do
      transition :running => :failed
    end

    event :finish do
      transition :running => :finished
    end
   
    state :running, :idle do
      validates_presence_of :jmx_source
    end
  end

  def initialize_engine
    Rails.logger.debug "Dummy: initialize_engine"
    return true
  end

  def perform_test
    Rails.logger.debug " perform_test"
    if self.initialize_engine
      self.start
      Delayed::Job.enqueue JmeterWorker.new( self.id )
    else
       Rails.logger.error 'ERROR initialize_engine failed: Aborting Job ...'
    end
  end

  def kill_process
    Rails.logger.debug "Killing jmeter process ..."
    if self.jmeter_pid != 0
      Rails.logger.info "kill -9 #{self.jmeter_pid}"
    end
  end

  def validate_results
    Rails.logger.debug "Dummy: validate_results"
  end

  def send_error_results
  end

  def locked?
    return self.locked
  end

end
